import re
import httpx
import numpy as np
import pandas as pd
import streamlit as st
import torch
import yfinance as yf
import plotly.graph_objects as go
from transformers import AutoModelForSequenceClassification, AutoTokenizer

# -----------------------------------------------------------------------------
# 🔒 Pop‑up Disclaimer (must accept before app runs)
# -----------------------------------------------------------------------------

# Persistent footer disclaimer text
DISCLAIMER_MD = """### ⚠️ CRITICAL RISK DISCLAIMER

FinScope AI is an **experimental research tool**. All charts, indicators and model outputs are provided **“as‑is”** for informational and educational use *only*.

**This application does NOT provide investment, financial, legal or tax advice.**  You alone are responsible for all trading decisions you make based on the information displayed here.

---

#### Key Risks & Limitations

| Topic | What you should know |
|-------|---------------------|
| **No performance guarantees** | Historical results, back‑tests and forecasts do **not** guarantee future returns. |
| **Market risk** | Trading equities, options, futures, foreign exchange and crypto can result in **substantial or total loss**, including losses that exceed your initial investment. Leverage magnifies risk. |
| **Data quality** | Price quotes, news feeds and indicator calculations may be *delayed, incomplete, inaccurate or unavailable* due to third‑party API limits or outages. |
| **Model fallibility** | Sentiment scores and entry signals are generated by machine‑learning models that can misclassify or fail in novel market conditions. |
| **Third‑party content** | Headlines and external links belong to their respective publishers. FinScope AI neither verifies nor endorses them. |
| **Jurisdiction & suitability** | The information presented may be illegal or unsuitable for certain jurisdictions or individuals. It is *your* responsibility to comply with all applicable laws and regulations. |

---

By continuing to use this application you **agree to hold the developers, contributors and hosting providers harmless** from any direct, indirect or consequential losses that may arise. Always consult a licensed financial professional before acting on any information presented here."""



# -----------------------------------------------------------------------------
# ⚙️ HELPERS & CACHING
# ----------------------------------------------------------------------------- & CACHING
# -----------------------------------------------------------------------------

@st.cache_resource(show_spinner=False, ttl=None)
def get_model():
    tok = AutoTokenizer.from_pretrained("yiyanghkust/finbert-tone")
    mdl = AutoModelForSequenceClassification.from_pretrained("yiyanghkust/finbert-tone")
    return tok, mdl


def _clean_headline(txt: str) -> str:
    return re.sub(r"\s+-\s+[A-Za-z &]+$", "", txt).strip()


@st.cache_data(ttl=900, show_spinner=False)
def fetch_news(tkr: str, api_key: str) -> list[str]:
    r = httpx.get(
        "https://newsapi.org/v2/everything",
        params={
            "q": tkr,
            "sortBy": "publishedAt",
            "language": "en",
            "pageSize": 20,
            "apiKey": api_key,
        },
        timeout=10,
    )
    r.raise_for_status()
    return [_clean_headline(a.get("title", "")) for a in r.json().get("articles", [])]


@st.cache_data(ttl=3600, show_spinner=False)
def default_tickers() -> list[str]:
    import requests
    from bs4 import BeautifulSoup
    try:
        html = requests.get("https://www.fool.com/investing/", timeout=10).text
        soup = BeautifulSoup(html, "html.parser")
        return [a.text for a in soup.find_all("a") if a.text.isupper() and len(a.text) <= 5][:10]
    except Exception:
        return ["AAPL", "MSFT", "NVDA", "AMZN", "GOOGL"]


@st.cache_data(ttl=300, show_spinner=False)
def load_history(symbol: str, period: str) -> pd.DataFrame:
    return yf.Ticker(symbol).history(period=period, auto_adjust=False)


@st.cache_data(ttl=120, show_spinner=False)
def load_intraday(symbol: str) -> pd.DataFrame:
    df = yf.download(symbol, interval="1m", period="1d", progress=False)
    if isinstance(df.columns, pd.MultiIndex):
        df.columns = df.columns.get_level_values(-1)
    return df.tz_localize(None)

# -----------------------------------------------------------------------------
# 📈 SENTIMENT FUNCTIONS
# -----------------------------------------------------------------------------

def score_sentiment(headlines: list[str]):
    tok, mdl = get_model()
    id2label = {int(k): v.lower() for k, v in mdl.config.id2label.items()}
    weights = {"positive": 1, "neutral": 0, "negative": -1}
    inputs = tok(headlines, return_tensors="pt", padding=True, truncation=True)
    with torch.no_grad():
        probs = torch.softmax(mdl(**inputs).logits, dim=-1).numpy()
    labels = [id2label[int(i)] for i in probs.argmax(axis=1)]
    compound = float(np.mean([weights[l] for l in labels])) if labels else 0.0
    return [l.capitalize() for l in labels], compound


def advice_from(compound: float) -> str:
    return "BUY" if compound >= 0.5 else "SELL" if compound <= -0.5 else "HOLD"

# -----------------------------------------------------------------------------
# 🔄 INTRADAY TECHNICALS
# -----------------------------------------------------------------------------

def compute_indicators(df: pd.DataFrame) -> pd.DataFrame:
    if df.empty:
        return df
    if isinstance(df.columns, pd.MultiIndex):
        df.columns = df.columns.get_level_values(-1)
    close_col = next((c for c in df.columns if c.lower() == "close"), None)
    if close_col is None:
        return pd.DataFrame()
    if close_col != "Close":
        df = df.rename(columns={close_col: "Close"})
    df = df.copy()
    df["SMA_20"] = df["Close"].rolling(20).mean()
    delta = df["Close"].diff()
    gain = delta.clip(lower=0).rolling(14).mean()
    loss = (-delta.clip(upper=0)).rolling(14).mean().replace(0, np.nan)
    rs = gain / loss
    df["RSI_14"] = 100 - 100 / (1 + rs)
    df["Entry"] = (
        (df["Close"].shift(1) < df["SMA_20"].shift(1)) &
        (df["Close"] > df["SMA_20"]) &
        (df["RSI_14"] < 70)
    )
    return df

# -----------------------------------------------------------------------------
# 🖥️ MAIN APP
# -----------------------------------------------------------------------------

def main():
    st.title("📈 FinScope AI")
    st.markdown("<hr style='margin-top:2em'>", unsafe_allow_html=True)
st.markdown(DISCLAIMER_MD, unsafe_allow_html=True)


if __name__ == "__main__":
    main()
